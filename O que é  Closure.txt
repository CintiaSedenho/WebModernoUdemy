üß† O que √© um Closure?
Um closure √© uma fun√ß√£o que ‚Äúlembra‚Äù do ambiente (vari√°veis) onde foi criada, mesmo depois que esse ambiente j√° saiu de execu√ß√£o.
Ou seja: fun√ß√µes internas t√™m acesso √†s vari√°veis da fun√ß√£o externa, mesmo ap√≥s ela ter sido executada.

‚úÖ Exemplo simples em JavaScript:
function saudacao(nome) {
  return function() {
    console.log("Ol√°, " + nome);
  }
}
const olaJoao = saudacao("Jo√£o");
olaJoao(); // Ol√°, Jo√£o

üîç O que aconteceu aqui?
A fun√ß√£o saudacao retornou outra fun√ß√£o.
A fun√ß√£o retornada ainda tem acesso √† vari√°vel nome, mesmo que saudacao j√° tenha terminado.
Isso √© um closure: a fun√ß√£o retornada "lembra" do escopo onde nasceu.

üì¶ Para que servem closures?
Closures s√£o √∫teis para:
Criar fun√ß√µes especializadas (fun√ß√µes que lembram de certos valores)
Encapsular dados privados (simulando atributos privados)
Usar em callbacks e eventos mantendo acesso a dados do contexto original

üõ†Ô∏è Exemplo com contadores:
function criarContador() {
  let count = 0;
  return function() {
    count++;
    console.log(count);
  }
}
const contador = criarContador();
contador(); // 1
contador(); // 2
contador(); // 3
Aqui, count √© preservado entre chamadas gra√ßas ao closure.

üîê Closures e dados "privados"
Em linguagens como JavaScript (que n√£o tem escopo privado nativamente), closures permitem simular privacidade:
function segredo() {
  let dadoPrivado = "12345";
  return {
    revelar: function() {
      return dadoPrivado;
    }
  };
}
const obj = segredo();
console.log(obj.revelar()); // 12345

üìö Em resumo:
Conceito		Explica√ß√£o r√°pida
Closure		Uma fun√ß√£o que ‚Äúlembra‚Äù do seu escopo l√©xico original, mesmo ap√≥s a execu√ß√£o do escopo externo
Serve para	Manter estado, encapsular dados, criar fun√ß√µes din√¢micas, callbacks
Usado em		JavaScript, Python, Swift, Rust, Lua, etc.
