üìå Tipos de Declara√ß√£o de Vari√°veis em JavaScript:

JavaScript tem tr√™s formas principais de declarar vari√°veis:

Tipo		Escopo		Pode reatribuir?		Pode redeclarar?	Coment√°rio
var		Fun√ß√£o		‚úÖ Sim			‚úÖ Sim			Evite usar, √© mais propensa a bugs
let		Bloco ({})		‚úÖ Sim			‚ùå N√£o			Mais segura e moderna
const		Bloco ({})		‚ùå N√£o (valor fixo)	‚ùå N√£o			Para constantes ou objetos fixos

üß† O que √© Contexto L√©xico?
Contexto l√©xico (ou escopo l√©xico) √© o ambiente onde as vari√°veis e fun√ß√µes s√£o declaradas e que define onde elas s√£o acess√≠veis.
Ou seja:
Uma fun√ß√£o tem acesso √†s vari√°veis que foram declaradas no local onde ela foi definida, e n√£o no local onde ela √© chamada.

‚úÖ Exemplo em JavaScript:
function fora() {
  const nome = "Lucas";
  function dentro() {
    console.log(nome); // 'dentro' tem acesso ao escopo de 'fora'
  }
  return dentro;
}
const func = fora(); // A fun√ß√£o 'fora' retorna a fun√ß√£o 'dentro'
func(); // Lucas


‚ö†Ô∏è Diferen√ßa entre escopo l√©xico e din√¢mico:
L√©xico (JavaScript, Python, Java): a fun√ß√£o usa o escopo onde foi escrita.
Din√¢mico (ex: algumas linguagens antigas): a fun√ß√£o usaria o escopo de quem a chamou, o que √© mais imprevis√≠vel.

üìö Resumo:
Termo			Significa
Contexto l√©xico		Onde uma fun√ß√£o/vari√°vel foi escrita no c√≥digo
Escopo l√©xico		As vari√°veis dispon√≠veis no local da defini√ß√£o da fun√ß√£o
Usado em			JavaScript, Python, Java, C, etc.

